import { ensureConversation, ensureUser, getCategoryIdByKey, insertMessage } from "../../../src/routes/chat/utils";
import { generateTitle } from "../../../src/lib/openai";

jest.mock('../../../src/lib/openai', () => ({
  generateTitle: jest.fn(() => Promise.resolve('Test Title')),
}));

describe('Utils Functions', () => {
  const fakeClient: any = {
    query: jest.fn(),
  };

  beforeEach(() => {
    fakeClient.query.mockReset();
    (generateTitle as jest.Mock).mockClear();
  });

  describe('ensureConversation', () => {
    it('should return the existing conversation id if found', async () => {
      // Simulate that conversation exists.
      fakeClient.query.mockResolvedValueOnce({ rows: [{ id: 'existing-conv-id' }] });
      
      const result = await ensureConversation(fakeClient, 'existing-conv-id', 'Test message', 'cat-id', 'user-id');
      expect(result).toBe('existing-conv-id');
      expect(fakeClient.query).toHaveBeenCalledWith(
        'SELECT id FROM conversations WHERE id = $1',
        ['existing-conv-id']
      );
      // generateTitle should not be called when conversation already exists.
      expect(generateTitle).not.toHaveBeenCalled();
    });

    it('should create a new conversation if not found', async () => {
      // First call: no conversation exists.
      fakeClient.query.mockResolvedValueOnce({ rows: [] });
      // Second call: insert new conversation.
      fakeClient.query.mockResolvedValueOnce({ rows: [{ id: 'new-conv-id' }] });

      const result = await ensureConversation(fakeClient, 'new-conv-id', 'Test message', 'cat-id', 'user-id');
      expect(result).toBe('new-conv-id');

      // Verify first SELECT query.
      expect(fakeClient.query).toHaveBeenNthCalledWith(
        1,
        'SELECT id FROM conversations WHERE id = $1',
        ['new-conv-id']
      );
      // Verify INSERT query with a title generated by generateTitle.
      expect(fakeClient.query).toHaveBeenNthCalledWith(
        2,
        'INSERT INTO conversations(id, title, category_id, user_id) VALUES($1, $2, $3, $4) RETURNING id',
        ['new-conv-id', expect.any(String), 'cat-id', 'user-id']
      );
      expect(generateTitle).toHaveBeenCalledWith('Test message');
    });
  });

  describe('insertMessage', () => {
    it('should insert a message and return its data', async () => {
      const fakeMessage = { id: 'msg-id', role: 'user', content: 'Hello world' };
      fakeClient.query.mockResolvedValueOnce({ rows: [fakeMessage] });

      const result = await insertMessage(fakeClient, 'conv-id', 'user-id', 'user', 'Hello world', 'cat-id');
      expect(result).toEqual(fakeMessage);
      expect(fakeClient.query).toHaveBeenCalledWith(
        'INSERT INTO messages(conversation_id, role, user_id, content, category_id) VALUES($1, $2, $3, $4, $5) RETURNING id, role, content',
        ['conv-id', 'user', 'user-id', 'Hello world', 'cat-id']
      );
    });
  });

  describe('getCategoryIdByKey', () => {
    it('should return the category id for a given key', async () => {
      fakeClient.query.mockResolvedValueOnce({ rows: [{ id: 'cat-id' }] });
      const result = await getCategoryIdByKey(fakeClient, 'some-key');
      expect(result).toBe('cat-id');
      expect(fakeClient.query).toHaveBeenCalledWith(
        'SELECT id FROM categories WHERE key = $1',
        ['some-key']
      );
    });
  });

  describe('ensureUser', () => {
    it('should return the existing user id if found', async () => {
      fakeClient.query.mockResolvedValueOnce({ rows: [{ id: 'user-id' }] });
      const result = await ensureUser(fakeClient, 'user-id');
      expect(result).toBe('user-id');
      expect(fakeClient.query).toHaveBeenCalledWith('SELECT id FROM users WHERE id = $1', ['user-id']);
    });

    it('should create a new user if not found', async () => {
      // First query returns no rows.
      fakeClient.query.mockResolvedValueOnce({ rows: [] });
      // Second query returns the new user.
      fakeClient.query.mockResolvedValueOnce({ rows: [{ id: 'new-user-id' }] });

      const result = await ensureUser(fakeClient, 'new-user-id');
      expect(result).toBe('new-user-id');
      expect(fakeClient.query).toHaveBeenNthCalledWith(
        1,
        'SELECT id FROM users WHERE id = $1',
        ['new-user-id']
      );
      expect(fakeClient.query).toHaveBeenNthCalledWith(
        2,
        'INSERT INTO users(id) VALUES($1) RETURNING id',
        ['new-user-id']
      );
    });
  });
});
