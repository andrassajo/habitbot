const fs = require('fs');
const path = require('path');

const initSqlPath = path.join(__dirname, './data/db.sql');
const sharedFolder = path.join(__dirname, 'shared');
const typesFile = path.join(sharedFolder, 'types.ts');

if (!fs.existsSync(initSqlPath)) {
    console.error('init.sql file not found!');
    process.exit(1);
}

const initSqlContent = fs.readFileSync(initSqlPath, 'utf8');

const tableRegex = /CREATE TABLE IF NOT EXISTS (\w+)\s*\(([\s\S]*?)\);/gi;
let match;
const tables = {};

while ((match = tableRegex.exec(initSqlContent)) !== null) {
    const tableName = match[1];
    const columnsBlock = match[2];
    const columns = [];

    const lines = columnsBlock.split('\n');
    for (let line of lines) {
        line = line.trim();
        if (
            !line ||
            line.startsWith('--') ||
            /^CONSTRAINT/i.test(line) ||
            /^(FOREIGN|REFERENCES|ON)\b/i.test(line)
        ) {
            continue;
        }
        line = line.replace(/,$/, '');

        const columnRegex = /^(\w+)\s+([A-Z]+(?:\(\d+\))?)(.*)$/i;
        const colMatch = columnRegex.exec(line);
        if (!colMatch) continue;
        const columnName = colMatch[1];
        const sqlType = colMatch[2];
        const rest = colMatch[3] || '';

        const isRequired = /NOT\s+NULL/i.test(rest) || /PRIMARY\s+KEY/i.test(rest);

        let tsType;
        const upperType = sqlType.toUpperCase();
        if (upperType.startsWith('UUID') || upperType.startsWith('VARCHAR') || upperType.startsWith('TEXT')) {
            tsType = 'string';
        } else if (upperType.startsWith('TIMESTAMP')) {
            tsType = 'Date';
        } else {
            tsType = 'any';
        }

        columns.push({ name: columnName, type: tsType, required: isRequired });
    }


    tables[tableName] = columns;
}

const toPascalCase = (str) => {
    if (str.endsWith('s')) str = str.slice(0, -1);
    return str.replace(/(?:^|_)(\w)/g, (_, c) => c.toUpperCase());
};

let output = `// This file is auto-generated by pnpm run bootstrap.
// Do not edit this file manually.

`;

for (const [tableName, columns] of Object.entries(tables)) {
    const typeName = toPascalCase(tableName);
    output += `export type ${typeName} = {\n`;
    for (const col of columns) {
        // If not required, allow null
        output += `  ${col.name}: ${col.type}${col.required ? '' : ' | null'};\n`;
    }
    output += `};\n\n`;
}

if (!fs.existsSync(sharedFolder)) {
    fs.mkdirSync(sharedFolder, { recursive: true });
}

fs.writeFileSync(typesFile, output, { encoding: 'utf8' });
console.log('shared/types.ts has been generated.');
